package ethereum

import (
	"context"
	"math/big"
	"testing"

	"github.com/stretchr/testify/require"

	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/rlp"
	"github.com/fibercrypto/fibercryptowallet/src/errors"
)

func TestEthereumBlockchainGetLastBlock(t *testing.T) {
	CleanGlobalMock()

	ctx := context.Background()
	blockEnc := common.FromHex("f90260f901f9a083cafc574e1f51ba9dc0568fc617a08ea2429fb384059c972f13b19fa1c8dd55a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347948888f1f195afa192cfee860698584c030f4c9db1a0ef1552a40b7165c3cd773806b9e0c165b75356e0314bf0706f279c729f51e017a05fe50b260da6308036625b850b5d6ced6d0a9f814c0688bc91ffb7b7a3a54b67a0bc37d79753ad738a6dac4921e57392f145d8887476de3f783dfa7edae9283e52bfefd8825208845506eb0780a0bd4472abb6659ebe3ee06ee4d7b72a00a9f4d001caca51342001075469aff49888a13a5a8c8f2bb1c4f861f85f800a82c35094095e7baea6a6c7c4c2dfeb977efac326af552d870a801ba09bea4c4daac7c7c52e093e6a4c35dbbcf8856f1af7b059ba20253e70848d094fa08a8fae537ce25ed8cb5af9adac3f141af69bd515bd2ba031522df09b97dd72b1c0")
	var block types.Block
	if err := rlp.DecodeBytes(blockEnc, &block); err != nil {
		t.Fatal("decode error: ", err)
	}

	mockEthApiBlockByNumber(global_mock, ctx, nil, &block, nil)
	version := new(big.Int).SetInt64(1)
	mockEthApiProtocolVersion(global_mock, ctx, version, nil)

	blockchain := NewEthereumBlockchain(0)
	require.NotNil(t, blockchain)

	blk, err := blockchain.GetLastBlock()
	require.Nil(t, err)

	vers, err := blk.GetVersion()
	require.Nil(t, err)
	require.Equal(t, vers, uint32(1))

	hash, err := blk.GetHash()
	require.Nil(t, err)
	require.Equal(t, string(hash), string("\nXC\xac\x1c\xb0He\x01|\xb3ZW\xb5\v\a\bN_\xce\xe3\x9bZ\xca\xda\xde3\x14\x9fO\xff\x9e"))

}

func TestEthereumBlockchainGetNumberOfBlocks(t *testing.T) {
	CleanGlobalMock()

	ctx := context.Background()
	blockEnc := common.FromHex("f90260f901f9a083cafc574e1f51ba9dc0568fc617a08ea2429fb384059c972f13b19fa1c8dd55a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347948888f1f195afa192cfee860698584c030f4c9db1a0ef1552a40b7165c3cd773806b9e0c165b75356e0314bf0706f279c729f51e017a05fe50b260da6308036625b850b5d6ced6d0a9f814c0688bc91ffb7b7a3a54b67a0bc37d79753ad738a6dac4921e57392f145d8887476de3f783dfa7edae9283e52bfefd8825208845506eb0780a0bd4472abb6659ebe3ee06ee4d7b72a00a9f4d001caca51342001075469aff49888a13a5a8c8f2bb1c4f861f85f800a82c35094095e7baea6a6c7c4c2dfeb977efac326af552d870a801ba09bea4c4daac7c7c52e093e6a4c35dbbcf8856f1af7b059ba20253e70848d094fa08a8fae537ce25ed8cb5af9adac3f141af69bd515bd2ba031522df09b97dd72b1c0")
	var block types.Block
	if err := rlp.DecodeBytes(blockEnc, &block); err != nil {
		t.Fatal("decode error: ", err)
	}

	mockEthApiBlockByNumber(global_mock, ctx, nil, &block, nil)
	version := new(big.Int).SetInt64(1)
	mockEthApiProtocolVersion(global_mock, ctx, version, nil)

	blockchain := NewEthereumBlockchain(0)
	require.NotNil(t, blockchain)

	number, err := blockchain.GetNumberOfBlocks()
	require.Nil(t, err)
	require.Equal(t, number, uint64(2))
}

func TestEthereumBlockchainGetBlockByHash(t *testing.T) {
	CleanGlobalMock()

	ctx := context.Background()
	blockEnc := common.FromHex("f90260f901f9a083cafc574e1f51ba9dc0568fc617a08ea2429fb384059c972f13b19fa1c8dd55a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347948888f1f195afa192cfee860698584c030f4c9db1a0ef1552a40b7165c3cd773806b9e0c165b75356e0314bf0706f279c729f51e017a05fe50b260da6308036625b850b5d6ced6d0a9f814c0688bc91ffb7b7a3a54b67a0bc37d79753ad738a6dac4921e57392f145d8887476de3f783dfa7edae9283e52bfefd8825208845506eb0780a0bd4472abb6659ebe3ee06ee4d7b72a00a9f4d001caca51342001075469aff49888a13a5a8c8f2bb1c4f861f85f800a82c35094095e7baea6a6c7c4c2dfeb977efac326af552d870a801ba09bea4c4daac7c7c52e093e6a4c35dbbcf8856f1af7b059ba20253e70848d094fa08a8fae537ce25ed8cb5af9adac3f141af69bd515bd2ba031522df09b97dd72b1c0")
	var block types.Block
	if err := rlp.DecodeBytes(blockEnc, &block); err != nil {
		t.Fatal("decode error: ", err)
	}

	mockEthApiGetBlockByHash(global_mock, ctx, block.Hash(), &block, nil)
	version := new(big.Int).SetInt64(1)
	mockEthApiProtocolVersion(global_mock, ctx, version, nil)

	blockchain := NewEthereumBlockchain(0)
	require.NotNil(t, blockchain)

	blk, err := blockchain.GetBlockByHash(block.Hash().String())
	require.Nil(t, err)

	obtainedHash, err := blk.GetHash()
	require.Nil(t, err)
	require.Equal(t, obtainedHash, block.Hash().Bytes())

}

func TestEthereumBlockchainGetRangeBlocks(t *testing.T) {
	CleanGlobalMock()

	ctx := context.Background()
	blockEnc := common.FromHex("f90260f901f9a083cafc574e1f51ba9dc0568fc617a08ea2429fb384059c972f13b19fa1c8dd55a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347948888f1f195afa192cfee860698584c030f4c9db1a0ef1552a40b7165c3cd773806b9e0c165b75356e0314bf0706f279c729f51e017a05fe50b260da6308036625b850b5d6ced6d0a9f814c0688bc91ffb7b7a3a54b67a0bc37d79753ad738a6dac4921e57392f145d8887476de3f783dfa7edae9283e52bfefd8825208845506eb0780a0bd4472abb6659ebe3ee06ee4d7b72a00a9f4d001caca51342001075469aff49888a13a5a8c8f2bb1c4f861f85f800a82c35094095e7baea6a6c7c4c2dfeb977efac326af552d870a801ba09bea4c4daac7c7c52e093e6a4c35dbbcf8856f1af7b059ba20253e70848d094fa08a8fae537ce25ed8cb5af9adac3f141af69bd515bd2ba031522df09b97dd72b1c0")
	var block types.Block
	if err := rlp.DecodeBytes(blockEnc, &block); err != nil {
		t.Fatal("decode error: ", err)
	}

	mockEthApiBlockByNumber(global_mock, ctx, new(big.Int).SetInt64(2), &block, nil)
	mockEthApiBlockByNumber(global_mock, ctx, new(big.Int).SetInt64(3), &block, nil)

	version := new(big.Int).SetInt64(1)
	mockEthApiProtocolVersion(global_mock, ctx, version, nil)

	blockchain := NewEthereumBlockchain(0)
	require.NotNil(t, blockchain)

	blks, err := blockchain.GetRangeBlocks(3, 2)
	require.Nil(t, blks)
	require.EqualError(t, err, errors.ErrInvalidRange.Error())

	blks, err2 := blockchain.GetRangeBlocks(2, 3)
	require.Nil(t, err2)
	require.NotNil(t, blks)

	err = nil
	blk1Hash, err := blks[0].GetHash()
	require.Nil(t, err)
	require.Equal(t, blk1Hash, block.Hash().Bytes())

	blk2Hash, err := blks[1].GetHash()
	require.Nil(t, err)
	require.Equal(t, blk2Hash, block.Hash().Bytes())

}

func TestEthereumBlockGetHash(t *testing.T) {

	blockEnc := common.FromHex("f90260f901f9a083cafc574e1f51ba9dc0568fc617a08ea2429fb384059c972f13b19fa1c8dd55a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347948888f1f195afa192cfee860698584c030f4c9db1a0ef1552a40b7165c3cd773806b9e0c165b75356e0314bf0706f279c729f51e017a05fe50b260da6308036625b850b5d6ced6d0a9f814c0688bc91ffb7b7a3a54b67a0bc37d79753ad738a6dac4921e57392f145d8887476de3f783dfa7edae9283e52bfefd8825208845506eb0780a0bd4472abb6659ebe3ee06ee4d7b72a00a9f4d001caca51342001075469aff49888a13a5a8c8f2bb1c4f861f85f800a82c35094095e7baea6a6c7c4c2dfeb977efac326af552d870a801ba09bea4c4daac7c7c52e093e6a4c35dbbcf8856f1af7b059ba20253e70848d094fa08a8fae537ce25ed8cb5af9adac3f141af69bd515bd2ba031522df09b97dd72b1c0")
	var block types.Block
	if err := rlp.DecodeBytes(blockEnc, &block); err != nil {
		t.Fatal("decode error: ", err)
	}

	blk := NewEthereumBlock(&block, 0)
	require.NotNil(t, blk)

	hash, err := blk.GetHash()
	require.Nil(t, err)
	require.Equal(t, hash, block.Hash().Bytes())

}

func TestEthereumBlockGetPrevHash(t *testing.T) {
	blockEnc := common.FromHex("f90260f901f9a083cafc574e1f51ba9dc0568fc617a08ea2429fb384059c972f13b19fa1c8dd55a01dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347948888f1f195afa192cfee860698584c030f4c9db1a0ef1552a40b7165c3cd773806b9e0c165b75356e0314bf0706f279c729f51e017a05fe50b260da6308036625b850b5d6ced6d0a9f814c0688bc91ffb7b7a3a54b67a0bc37d79753ad738a6dac4921e57392f145d8887476de3f783dfa7edae9283e52bfefd8825208845506eb0780a0bd4472abb6659ebe3ee06ee4d7b72a00a9f4d001caca51342001075469aff49888a13a5a8c8f2bb1c4f861f85f800a82c35094095e7baea6a6c7c4c2dfeb977efac326af552d870a801ba09bea4c4daac7c7c52e093e6a4c35dbbcf8856f1af7b059ba20253e70848d094fa08a8fae537ce25ed8cb5af9adac3f141af69bd515bd2ba031522df09b97dd72b1c0")
	var block types.Block
	if err := rlp.DecodeBytes(blockEnc, &block); err != nil {
		t.Fatal("decode error: ", err)
	}

	blk := NewEthereumBlock(&block, 0)
	require.NotNil(t, blk)

	hash, err := blk.GetPrevHash()
	require.Nil(t, err)
	require.Equal(t, hash, block.ParentHash().Bytes())
}
